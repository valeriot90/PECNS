/*
 * Behavior of the Source simple module
 * The main task of this module is to generate packets relying on a distribution specified
 * in the configuration file, also setting their length
 *
 * Authors: Alberto Cristallo, Luca Ciampi, Valerio Tanferna
 */

#include <omnetpp.h>
#include "packet_m.h"
#include "KindMsgDef.h"

using namespace omnetpp;


class Source : public cSimpleModule {
  private:
    cMessage *sendMessageEvent;     // Timer: every k seconds a new packet must be generated
    Packet *packet;     // Packet to send

  public:
    Source();
    virtual ~Source();

  protected:
    virtual void initialize() override;
    virtual void handleMessage(cMessage *msg) override;
};

Define_Module(Source);


Source::Source() {
    sendMessageEvent = packet = nullptr;
}

Source::~Source() {
    // TODO
}

void Source::initialize() {
    sendMessageEvent = new cMessage("sendMessageEvent");
    scheduleAt(simTime(), sendMessageEvent);
}

void Source::handleMessage(cMessage *msg) {
    // Timer expired: a new packet is created and sent to the fifo.
    packet = new Packet();
    packet->setKind(PACKET);

    // We set the priority of the packet.
    // Note that it is only useful when a priority queue is chosen
    packet->setPriority(par("packetPriority").longValue());

    // We also set the length of the packet
    packet->setPacketSize(par("packetSize").longValue());   // implicit conversion from long to int of packetSize

    // We send the packet
    send(packet, "out");

    // A new event is scheduled: every k seconds a new packet must be generated by the Source module
    scheduleAt(simTime()+par("k").doubleValue(), msg);

//    // DEBUG
//    EV << "Packet Id: " << packet->getId() << " of size: " << packet->getPacketSize() << " bits generated at time: " << packet->getCreationTime() << "\n";
}

